# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries
https://s89219.github.io/-Zero-#892   <!-- Copyright 2022 The Chromium Authors Use of this source code is governed by a BSD-style license that can be found in the LICENSE file. --> <!DOCTYPE html> <html dir="ltr" lang="en"> <head> <meta charset="utf-8"> <link rel="stylesheet" href="chrome://resources/css/text_defaults.css"> <link rel="stylesheet" href="chrome://resources/css/roboto.css"> <link rel="stylesheet" href="aggregation_service_internals.css"> <script type="module" src="aggregation_service_internals.js"></script> <title>Private Aggregation API Internals</title> </head> <body> <header> <h1>Private Aggregation API Internals</h1> <button id="refresh">Refresh all page data</button> <button id="clear-data">Clear all private aggregation data</button> </header> <main> <section> <h2>Aggregatable reports</h2> <div class="content"> <button class = "button sendbutton" id="send-reports" disabled>Send Selected Reports</button> <aggregation-service-internals-table id="reportTable"> </aggregation-service-internals-table> </div> </section> </main> </body> </html> Je suis l'Armée de Libération # This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the master branch #<!--ТНАΝН_ТRА³-ТНÁI-ВÌΝΗ-DƯƠNG- Copyright 2022 The Chromium Authors Use of this source code is governed by a BSD-style license that can be found in the LICENSE file. --> <!DOCTYPE html> <html dir="ltr" lang="en"> <head> <meta charset="utf-8"> <link rel="stylesheet" href="chrome://resources/css/text_defaults.css"> <link rel="stylesheet" href="chrome://resources/css/roboto.css"> <link rel="stylesheet" href="aggregation_service_internals.css"> <script type="module" src="aggregation_service_internals.js"></script> <title>Private Aggregation API Internals</title> </head> <body> <header> <h1>Private Aggregation API Internals</h1> <button id="refresh">Refresh all page data</button> <button id="clear-data">Clear all private aggregation data</button> </header> <main> <section> <h2>Aggregatable reports</h2> <div class="content"> <button class = "button sendbutton" id="send-reports" disabled>Send Selected Reports</button> <aggregation-service-internals-table id="reportTable"> </aggregation-service-internals-table> </div> </section> </main> </body> </html> # Overview: # # 1. Authenticate to Google Cloud # 2. Authenticate Docker to Artifact Registry # 3. Build a docker container # 4. Publish it to Google Artifact Registry # 5. Deploy it to Cloud Run # # To configure this workflow: # # 1. Ensure the required Google Cloud APIs are enabled: # #    Cloud Run            run.googleapis.com #    Artifact Registry    artifactregistry.googleapis.com # # 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation) # # 3. Ensure the required IAM permissions are granted # #    Cloud Run #      roles/run.admin #      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account) # #    Artifact Registry #      roles/artifactregistry.admin     (project or repository level) # #    NOTE: You should always follow the principle of least privilege when assigning IAM roles # # 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT # # 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below). # # NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io # # For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run # # Further reading: #   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying #   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles #   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry #   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege name: Build and Deploy to Cloud Run on: push: branches: - master env: PROJECT_ID: YOUR_PROJECT_ID # TODO: update Google Cloud project id GAR_LOCATION: YOUR_GAR_LOCATION # TODO: update Artifact Registry location SERVICE: YOUR_SERVICE_NAME # TODO: update Cloud Run service name REGION: YOUR_SERVICE_REGION # TODO: update Cloud Run service region jobs: deploy: # Add 'id-token' with the intended permissions for workload identity federation permissions: contents: 'read' id-token: 'write' runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v2 - name: Google Auth id: auth uses: 'google-github-actions/auth@v0' with: token_format: 'access_token' workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com # NOTE: Alternative option - authentication via credentials json # - name: Google Auth #   id: auth #   uses: 'google-github-actions/auth@v0' #   with: #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'' # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted) # Authenticate Docker to Google Cloud Artifact Registry - name: Docker Auth id: docker-auth uses: 'docker/login-action@v1' with: username: 'oauth2accesstoken' password: '${{ steps.auth.outputs.access_token }}' registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev' - name: Build and Push Container run: |- docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}" ./ docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}" # END - Docker auth and build - name: Deploy to Cloud Run id: deploy uses: google-github-actions/deploy-cloudrun@v0 with: service: ${{ env.SERVICE }} region: ${{ env.REGION }} # NOTE: If using a pre-built image, update the image name here image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }} # If required, use the Cloud Run url output in later steps - name: Show Output run: echo ${{ steps.deploy.outputs.url }} user-images.githubusercontent.com/93700294/210304309-41b0ce7a-5263-4318-b113-fa8cceb2d0fc.jpg#4 user-images.githubusercontent.com/93700294/210304321-a1e3130d-e2e0-47f8-b805-220b99427a84.jpg user-images.githubusercontent.com/93700294/210304323-d72eeb8a-33ac-4d2e-b76f-271f746dd3fb.jpg user-images.githubusercontent.com/93700294/210304324-878bc3a2-19b2-4ae1-86d4-e5ae5bed924e.jpg user-images.githubusercontent.com/93700294/210304326-05d0ab8a-0c52-47c8-8f65-c045b34da63c.jpg user-images.githubusercontent.com/93700294/210304330-c65699a5-9d90-4150-a469-7212d05f5f31.jpg user-images.githubusercontent.com/93700294/210304333-9c04832f-5166-439f-ba79-6b042f3c5d79.png user-images.githubusercontent.com/93700294/210304335-f0e38103-3c8f-4606-8d8b-8f94ea059009.jpg user-images.githubusercontent.com/93700294/210304336-55e970d8-9112-4e81-adf3-756ce4dcb30c.png user-images.githubusercontent.com/93700294/210304339-9bc18fa3-25bf-4dde-a601-d7d391561399.jpg user-images.githubusercontent.com/93700294/210304341-e0669a44-a55d-46c0-8357-101d2387b109.png user-images.githubusercontent.com/93700294/210304343-31001bf3-984a-45b2-b4ec-aba5d8f96226.jpg user-images.githubusercontent.com/93700294/210304347-5192633a-c4a3-4a94-9ea7-d0537492488f.png user-images.githubusercontent.com/93700294/210304349-a6e0898c-bc18-4cee-bdf3-43a402afb91e.jpg user-images.githubusercontent.com/93700294/210304351-7d6cec26-2573-418c-9013-6f51f6813e1b.png i user-images.githubusercontent.com/93700294/210304355-06ede0a9-550e-48ba-a70b-b2154e5db1bf.jpg user-images.githubusercontent.com/93700294/210304357-80ca4749-7225-41e8-a740-c19f99c0fa6c.jpg user-images.githubusercontent.com/93700294/210304240-85eaecfa-1a91-4742-b0c3-d0ff1fcfb611.png user-images.githubusercontent.com/93700294/210304252-ea520d80-a365-443d-a871-a898d88a9df7.png user-images.githubusercontent.com/93700294/210304253-3c17e809-3409-4bc5-81eb-234dfa1dd91c.png
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    - name: Build package
      run: python -m build
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
